
GPIOInputOutput.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f4  080001f0  080001f0  000011f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e4  080003ec  000013ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e4  080003e4  000013ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080003e4  080003e4  000013ec  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080003e4  080003ec  000013ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e4  080003e4  000013e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003e8  080003e8  000013e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003ec  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003ec  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000525  00000000  00000000  00001422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000185  00000000  00000000  00001947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000088  00000000  00000000  00001ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000057  00000000  00000000  00001b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d2d3  00000000  00000000  00001baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000bde  00000000  00000000  0001ee82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa355  00000000  00000000  0001fa60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9db5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000108  00000000  00000000  000c9df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000c9f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000000 	.word	0x20000000
 800020c:	00000000 	.word	0x00000000
 8000210:	080003cc 	.word	0x080003cc

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000004 	.word	0x20000004
 800022c:	080003cc 	.word	0x080003cc

08000230 <led_init>:
#define LED_BR7 (1U<<23) /*Bit Reset Pin 7*/
#define BTN_PIN (1U<<13)


void led_init(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOC*/
	RCC->AHB2ENR |= GPIOCEN;
 8000234:	4b0b      	ldr	r3, [pc, #44]	@ (8000264 <led_init+0x34>)
 8000236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000238:	4a0a      	ldr	r2, [pc, #40]	@ (8000264 <led_init+0x34>)
 800023a:	f043 0304 	orr.w	r3, r3, #4
 800023e:	64d3      	str	r3, [r2, #76]	@ 0x4c
	/*Set PC7 mode to output mode*/
	GPIOC->MODER |= (1U<<14);
 8000240:	4b09      	ldr	r3, [pc, #36]	@ (8000268 <led_init+0x38>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a08      	ldr	r2, [pc, #32]	@ (8000268 <led_init+0x38>)
 8000246:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800024a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1U<<15);
 800024c:	4b06      	ldr	r3, [pc, #24]	@ (8000268 <led_init+0x38>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a05      	ldr	r2, [pc, #20]	@ (8000268 <led_init+0x38>)
 8000252:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000256:	6013      	str	r3, [r2, #0]
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40021000 	.word	0x40021000
 8000268:	42020800 	.word	0x42020800

0800026c <btn_init>:

void btn_init(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOC*/
	RCC->AHB2ENR |= GPIOCEN;
 8000270:	4b0b      	ldr	r3, [pc, #44]	@ (80002a0 <btn_init+0x34>)
 8000272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000274:	4a0a      	ldr	r2, [pc, #40]	@ (80002a0 <btn_init+0x34>)
 8000276:	f043 0304 	orr.w	r3, r3, #4
 800027a:	64d3      	str	r3, [r2, #76]	@ 0x4c
	/*Set PC13 mode as an input pin*/
	GPIOC->MODER &=~(1U<<26);
 800027c:	4b09      	ldr	r3, [pc, #36]	@ (80002a4 <btn_init+0x38>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a08      	ldr	r2, [pc, #32]	@ (80002a4 <btn_init+0x38>)
 8000282:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8000286:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<27);
 8000288:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <btn_init+0x38>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a05      	ldr	r2, [pc, #20]	@ (80002a4 <btn_init+0x38>)
 800028e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000292:	6013      	str	r3, [r2, #0]
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40021000 	.word	0x40021000
 80002a4:	42020800 	.word	0x42020800

080002a8 <get_btn_state>:

bool get_btn_state(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
	// bitwise AND with the input data register and the pin
	// true if pin is pressed, as docs say btn down logic is 1, up is 0
	if (GPIOC->IDR & BTN_PIN)
 80002ac:	4b06      	ldr	r3, [pc, #24]	@ (80002c8 <get_btn_state+0x20>)
 80002ae:	691b      	ldr	r3, [r3, #16]
 80002b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <get_btn_state+0x14>
	{
		return true;
 80002b8:	2301      	movs	r3, #1
 80002ba:	e000      	b.n	80002be <get_btn_state+0x16>
	}
	else
	{
		return false;
 80002bc:	2300      	movs	r3, #0
	}
}
 80002be:	4618      	mov	r0, r3
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	42020800 	.word	0x42020800

080002cc <led_on>:

void led_on(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
	/*Set PC7 high*/
	GPIOC->BSRR |=LED_BS7;
 80002d0:	4b05      	ldr	r3, [pc, #20]	@ (80002e8 <led_on+0x1c>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4a04      	ldr	r2, [pc, #16]	@ (80002e8 <led_on+0x1c>)
 80002d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002da:	6193      	str	r3, [r2, #24]
}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	42020800 	.word	0x42020800

080002ec <led_off>:
void led_off(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
	/*Set PC7 low*/
	GPIOC->BSRR |=LED_BR7;
 80002f0:	4b05      	ldr	r3, [pc, #20]	@ (8000308 <led_off+0x1c>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a04      	ldr	r2, [pc, #16]	@ (8000308 <led_off+0x1c>)
 80002f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80002fa:	6193      	str	r3, [r2, #24]
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	42020800 	.word	0x42020800

0800030c <main>:
#include "gpio.h"

int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	/*Initialize LED*/
	led_init();
 8000310:	f7ff ff8e 	bl	8000230 <led_init>
	btn_init();
 8000314:	f7ff ffaa 	bl	800026c <btn_init>

	while(1)
	{
		if (get_btn_state())
 8000318:	f7ff ffc6 	bl	80002a8 <get_btn_state>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d002      	beq.n	8000328 <main+0x1c>
		{
			led_on();
 8000322:	f7ff ffd3 	bl	80002cc <led_on>
 8000326:	e7f7      	b.n	8000318 <main+0xc>
		}
		else
		{
			led_off();
 8000328:	f7ff ffe0 	bl	80002ec <led_off>
		if (get_btn_state())
 800032c:	e7f4      	b.n	8000318 <main+0xc>
	...

08000330 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000330:	480d      	ldr	r0, [pc, #52]	@ (8000368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000332:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000334:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000338:	480c      	ldr	r0, [pc, #48]	@ (800036c <LoopForever+0x6>)
  ldr r1, =_edata
 800033a:	490d      	ldr	r1, [pc, #52]	@ (8000370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800033c:	4a0d      	ldr	r2, [pc, #52]	@ (8000374 <LoopForever+0xe>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000340:	e002      	b.n	8000348 <LoopCopyDataInit>

08000342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000346:	3304      	adds	r3, #4

08000348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800034c:	d3f9      	bcc.n	8000342 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034e:	4a0a      	ldr	r2, [pc, #40]	@ (8000378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000350:	4c0a      	ldr	r4, [pc, #40]	@ (800037c <LoopForever+0x16>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000354:	e001      	b.n	800035a <LoopFillZerobss>

08000356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000358:	3204      	adds	r2, #4

0800035a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800035c:	d3fb      	bcc.n	8000356 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800035e:	f000 f811 	bl	8000384 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000362:	f7ff ffd3 	bl	800030c <main>

08000366 <LoopForever>:

LoopForever:
  b LoopForever
 8000366:	e7fe      	b.n	8000366 <LoopForever>
  ldr   r0, =_estack
 8000368:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800036c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000370:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000374:	080003ec 	.word	0x080003ec
  ldr r2, =_sbss
 8000378:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800037c:	2000001c 	.word	0x2000001c

08000380 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000380:	e7fe      	b.n	8000380 <ADC1_2_IRQHandler>
	...

08000384 <__libc_init_array>:
 8000384:	b570      	push	{r4, r5, r6, lr}
 8000386:	4d0d      	ldr	r5, [pc, #52]	@ (80003bc <__libc_init_array+0x38>)
 8000388:	2600      	movs	r6, #0
 800038a:	4c0d      	ldr	r4, [pc, #52]	@ (80003c0 <__libc_init_array+0x3c>)
 800038c:	1b64      	subs	r4, r4, r5
 800038e:	10a4      	asrs	r4, r4, #2
 8000390:	42a6      	cmp	r6, r4
 8000392:	d109      	bne.n	80003a8 <__libc_init_array+0x24>
 8000394:	4d0b      	ldr	r5, [pc, #44]	@ (80003c4 <__libc_init_array+0x40>)
 8000396:	2600      	movs	r6, #0
 8000398:	4c0b      	ldr	r4, [pc, #44]	@ (80003c8 <__libc_init_array+0x44>)
 800039a:	f000 f817 	bl	80003cc <_init>
 800039e:	1b64      	subs	r4, r4, r5
 80003a0:	10a4      	asrs	r4, r4, #2
 80003a2:	42a6      	cmp	r6, r4
 80003a4:	d105      	bne.n	80003b2 <__libc_init_array+0x2e>
 80003a6:	bd70      	pop	{r4, r5, r6, pc}
 80003a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ac:	3601      	adds	r6, #1
 80003ae:	4798      	blx	r3
 80003b0:	e7ee      	b.n	8000390 <__libc_init_array+0xc>
 80003b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b6:	3601      	adds	r6, #1
 80003b8:	4798      	blx	r3
 80003ba:	e7f2      	b.n	80003a2 <__libc_init_array+0x1e>
 80003bc:	080003e4 	.word	0x080003e4
 80003c0:	080003e4 	.word	0x080003e4
 80003c4:	080003e4 	.word	0x080003e4
 80003c8:	080003e8 	.word	0x080003e8

080003cc <_init>:
 80003cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ce:	bf00      	nop
 80003d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d2:	bc08      	pop	{r3}
 80003d4:	469e      	mov	lr, r3
 80003d6:	4770      	bx	lr

080003d8 <_fini>:
 80003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003da:	bf00      	nop
 80003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003de:	bc08      	pop	{r3}
 80003e0:	469e      	mov	lr, r3
 80003e2:	4770      	bx	lr
